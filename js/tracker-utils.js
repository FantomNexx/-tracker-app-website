var MONTHS_YEAR_RU = [  'Января', 'Февраля', 'Марта', 'Апреля', 'Мая', 'Июня',  'Июля', 'Августа', 'Сентября', 'Октября', 'Ноября', 'Декабря'];/** GetSessionTime * @param {Number} ts_start * @param {Number} ts_end * @returns {String} */function GetSessionTime( ts_start, ts_end ){    var start = new Date( Number( ts_end ) );  var end   = new Date( Number( ts_start ) );    var year  = start.getFullYear();  var month = MONTHS_YEAR_RU[start.getMonth()];  var date  = FormatNumberPriorZeroes( start.getDate(), 2 );    var start_hour = FormatNumberPriorZeroes( start.getHours(), 2 );  var start_min  = FormatNumberPriorZeroes( start.getMinutes(), 2 );    var end_hour = FormatNumberPriorZeroes( end.getHours(), 2 );  var end_min  = FormatNumberPriorZeroes( end.getMinutes(), 2 );    return date + ' ' + month + ' ' + year + '&nbsp;&nbsp;' +    start_hour + ':' + start_min + ' - ' + end_hour + ':' + end_min;}//GetSessionTime/** FormatTimeStamp * @param {Number} timestamp * @returns {String} */function FormatTimeStamp( timestamp ){    var datetime = new Date( Number( timestamp ) );    var year  = datetime.getFullYear();  var month = MONTHS_YEAR_RU[datetime.getMonth()];  var date  = datetime.getDate();    var hour = FormatNumberPriorZeroes( datetime.getHours(), 2 );  var min  = FormatNumberPriorZeroes( datetime.getMinutes(), 2 );  var sec  = FormatNumberPriorZeroes( datetime.getSeconds(), 2 );    return date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;}//FormatTimeStamp/** FormatTimeStamp * @param {date} datetime * @returns {String} */function FormatTimeStamp_DatePicker( datetime ){    var year  = datetime.getFullYear();  var month = FormatNumberPriorZeroes( datetime.getMonth() + 1, 2 );  var date  = FormatNumberPriorZeroes( datetime.getDate(), 2 );  var hour  = FormatNumberPriorZeroes( datetime.getHours(), 2 );  var min   = FormatNumberPriorZeroes( datetime.getMinutes(), 2 );    return date + '/' + month + '/' + year + ' ' + hour + ':' + min;}//FormatTimeStamp_DatePicker/** FormatNumberPriorZeroes * Returns a number iwth leading zeroes * @param {Number} num * @param {Number} places * @returns {String} */function FormatNumberPriorZeroes( num, places ){  var zero = places - num.toString().length + 1;  return new Array( +(zero > 0 && zero) ).join( "0" ) + num;}//FormatNumberPriorZeroes/** GetTimeDiff * @returns {Number} */function GetTimeDiff( point_curr, point_prev ){  var time_curr = Number( point_curr.timestamp );  var time_prev = Number( point_prev.timestamp );    return Math.abs( time_curr - time_prev );}//GetTimeDiff/** GetSpeed * @returns {String} */function GetSpeed( point_curr, point_prev ){    //in milisecons  var time = GetTimeDiff( point_curr, point_prev );    //in meters  var distance = GetDistance( point_curr.coords, point_prev.coords );    var time_diff_hours = (time / 1000) / 3600;  var distance_km     = (distance / 1000);    return (distance_km / time_diff_hours).toFixed( 2 );}//GetSpeedfunction GetGoogleCoords( point ){  return new google.maps.LatLng(    parseFloat( point.latitude ),    parseFloat( point.longitude ) );}//GetGoogleCoords/** DegreesToRads * @returns {Number} */function DegreesToRads( x ){  return x * Math.PI / 180;}//DegreesToRads/** GetDistance * @returns {Number} */function GetDistance( p1, p2 ){    var R = 6378137; // Earth’s mean radius in meter    var dLat  = DegreesToRads( p2.lat() - p1.lat() );  var dLong = DegreesToRads( p2.lng() - p1.lng() );    var a =        Math.sin( dLat / 2 ) * Math.sin( dLat / 2 ) +        Math.cos( DegreesToRads( p1.lat() ) ) *        Math.cos( DegreesToRads( p2.lat() ) ) *        Math.sin( dLong / 2 ) * Math.sin( dLong / 2 );    var c = 2 * Math.atan2( Math.sqrt( a ), Math.sqrt( 1 - a ) );  var d = R * c;    return d; // returns the distance in meters}//GetDistance